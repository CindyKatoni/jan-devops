pipeline {
  agent any
  tools {

  maven 'maven'

  }
    stages {

      stage ('Checkout SCM'){
        steps {
          checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'git', url: 'https://theitern@bitbucket.org/theitern/class1.git']]])
        }
      }

          stage ('Build')  {
              steps {
            dir('webapp'){
            sh "pwd"
            sh "ls -lah"
            sh "mvn package"
          }
        }

      }

     stage ('SonarQube Analysis') {
        steps {
              withSonarQubeEnv('sonar') {

                                dir('webapp'){
                 sh 'mvn -U clean install sonar:sonar'
                }

              }
            }
      }

    stage ('Artifactory configuration') {
            steps {
                rtServer (
                    id: "jfrog",
                    url: "http://3.238.35.39:8082/artifactory",
                    credentialsId: "jfrog"
                )

                rtMavenDeployer (
                    id: "MAVEN_DEPLOYER",
                    serverId: "jfrog",
                    releaseRepo: "classwork1-libs-release-local",
                    snapshotRepo: "classwork1-libs-snapshot-local"
                )

                rtMavenResolver (
                    id: "MAVEN_RESOLVER",
                    serverId: "jfrog",
                    releaseRepo: "classwork1-libs-release",
                    snapshotRepo: "classwork1-libs-snapshot"
                )
            }
    }

    stage ('Deploy Artifacts') {
            steps {
                rtMavenRun (
                    tool: "maven", // Tool name from Jenkins configuration
                    pom: 'webapp/pom.xml',
                    goals: 'clean install',
                    deployerId: "MAVEN_DEPLOYER",
                    resolverId: "MAVEN_RESOLVER"
                )
         }
    }

    stage ('Publish build info') {
            steps {
                rtPublishBuildInfo (
                    serverId: "jfrog"
             )
        }
    }

    stage('Copy Dockerfile & Playbook to Ansible Server') {

            steps {
                  sshagent(['ssh_agent']) {

                        sh "scp -i DevOps2022KeyPair.pem -o StrictHostKeyChecking=no dockerfile ubuntu@18.206.173.255:/home/ubuntu"
                        sh "scp -i DevOps2022KeyPair.pem -o StrictHostKeyChecking=no playbook1.yaml ubuntu@18.206.173.255:/home/ubuntu"
                    }
                }

        }

    stage('Build Container Image') {

            steps {
                  sshagent(['ssh_key']) {
<<<<<<< HEAD

                        sh "ssh -i DevOps2022KeyPair.pem -o StrictHostKeyChecking=no ubuntu@18.206.173.255 -C \"sudo ansible-playbook playbook1.yaml\""

=======
                       
                        sh "ssh -i DevOps2022KeyPair.pem -o StrictHostKeyChecking=no ubuntu@18.206.173.255 -C \"sudo ansible-playbook -i hosts create-container-image.yaml\""
                        
>>>>>>> c4266180f4f8819c1e4135551fd2f960d8b24651
                    }
                }

        }

    stage('Copy Deployment & Service Defination to K8s Master') {

            steps {
                  sshagent(['ssh_key']) {

                        sh "scp -i DevOps2022KeyPair.pem -o StrictHostKeyChecking=no deployment.yaml ubuntu@54.236.58.176:/home/ubuntu"
                        sh "scp -i DevOps2022KeyPair.pem -o StrictHostKeyChecking=no service.yaml ubuntu@54.236.58.176:/home/ubuntu"
                    }
                }

        }

    stage('Waiting for Approvals') {

        steps{

                                input('Test Completed ? Please provide  Approvals for Prod Release ?')
                          }

    }
    stage('Deploy Artifacts to Production') {

            steps {
                  sshagent(['ssh_key']) {

                        sh "ssh -i DevOps2022KeyPair.pem -o StrictHostKeyChecking=no ubuntu@54.236.58.176 -C \"sudo kubectl apply -f deployment.yaml\""
                        sh "ssh -i DevOps2022KeyPair.pem -o StrictHostKeyChecking=no ubuntu@54.236.58.176 -C \"sudo kubectl apply -f service.yaml\""

                    }
                }

        }

   }
}


